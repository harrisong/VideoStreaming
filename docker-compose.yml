version: '3.8'

# Note: This docker-compose file uses service names for container communication
# The nginx-sidecar/nginx.conf file is configured for Docker Compose networking
# For ECS Fargate deployment, use nginx-sidecar/nginx.ecs.conf which uses localhost

services:
  nginx-proxy:
    build: ./nginx-sidecar
    platform: linux/amd64
    ports:
      - "80:80"
    volumes:
      - ./nginx-sidecar/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - frontend
      - backend
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/api/status"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 60s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    platform: linux/amd64
    environment:
      - NODE_ENV=production
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  backend:
    build:
      context: ./rust-backend
      args:
        - DATABASE_URL=postgres://postgres:postgres@db:5432/video_streaming_db
    platform: linux/amd64
    depends_on:
      - db
      - minio
      - redis
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/video_streaming_db
      - JWT_SECRET=secure_jwt_secret_key_12345
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=minio123
      - MINIO_BUCKET=videos
      - REDIS_URL=redis://redis:6379
      - CORS_ALLOWED_ORIGINS=http://localhost
    volumes:
      - cargo-registry:/usr/local/cargo/registry
      - cargo-git:/usr/local/cargo/git
      - backend-target:/usr/src/app/target
    networks:
      - app-network
    healthcheck:
      test: |
        curl -f http://localhost:5050/api/status || exit 1
        curl -f -H "Connection: Upgrade" -H "Upgrade: websocket" -H "Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==" -H "Sec-WebSocket-Version: 13" http://localhost:8080/api/ws/comments/1 || exit 1
        curl -f -H "Connection: Upgrade" -H "Upgrade: websocket" -H "Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==" -H "Sec-WebSocket-Version: 13" http://localhost:8080/api/ws/watchparty/1 || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  youtube-scraper:
    build:
      context: ./youtube-scraper
    platform: linux/amd64
    depends_on:
      - db
      - minio
    environment:
      - DATABASE_URL=postgres://postgres:postgres@db:5432/video_streaming_db
      - MINIO_ENDPOINT=http://minio:9000
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=minio123
      - MINIO_BUCKET=videos
      - RUST_LOG=info
    volumes:
      - youtube-scraper-data:/tmp/videos
      - ./urls_to_scrape:/usr/src/app/urls_to_scrape
      - cargo-registry:/usr/local/cargo/registry
      - cargo-git:/usr/local/cargo/git
      - youtube-scraper-target:/usr/src/app/target
    networks:
      - app-network

  db:
    image: postgres:13
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=video_streaming_db
    ports:
      - "5432:5432"
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./rust-backend/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - app-network

  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=minio123
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    networks:
      - app-network

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  db-data:
  minio-data:
  redis-data:
  youtube-scraper-data:
  cargo-registry:
  cargo-git:
  backend-target:
  youtube-scraper-target:
